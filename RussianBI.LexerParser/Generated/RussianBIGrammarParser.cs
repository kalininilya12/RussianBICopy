//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RussianBIGrammar.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RussianBIGrammarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, TABLE_SELECTOR=5, COLUMN_SELECTOR=6, LR_BRACKET=7, 
		RR_BRACKET=8, WS=9, NON_EMPTY_STRING=10;
	public const int
		RULE_root = 0, RULE_groupByFunction = 1, RULE_column = 2, RULE_groupByColumns = 3, 
		RULE_groupByCalculations = 4, RULE_groupByCalculation = 5, RULE_sumFunc = 6, 
		RULE_measureName = 7;
	public static readonly string[] ruleNames = {
		"root", "groupByFunction", "column", "groupByColumns", "groupByCalculations", 
		"groupByCalculation", "sumFunc", "measureName"
	};

	private static readonly string[] _LiteralNames = {
		null, "'calc'", "'groupBy'", "','", "'SUM'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "TABLE_SELECTOR", "COLUMN_SELECTOR", "LR_BRACKET", 
		"RR_BRACKET", "WS", "NON_EMPTY_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RussianBIGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RussianBIGrammarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RussianBIGrammarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RussianBIGrammarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class RootContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupByFunctionContext groupByFunction() {
			return GetRuleContext<GroupByFunctionContext>(0);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(Context, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(T__0);
			State = 17;
			groupByFunction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(RussianBIGrammarParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByColumnsContext groupByColumns() {
			return GetRuleContext<GroupByColumnsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(RussianBIGrammarParser.RR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCalculationsContext groupByCalculations() {
			return GetRuleContext<GroupByCalculationsContext>(0);
		}
		public GroupByFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterGroupByFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitGroupByFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByFunctionContext groupByFunction() {
		GroupByFunctionContext _localctx = new GroupByFunctionContext(Context, State);
		EnterRule(_localctx, 2, RULE_groupByFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			Match(T__1);
			State = 20;
			Match(LR_BRACKET);
			State = 21;
			groupByColumns();
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__2) {
				{
				State = 22;
				Match(T__2);
				State = 23;
				groupByCalculations();
				}
			}

			State = 26;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SELECTOR() { return GetToken(RussianBIGrammarParser.TABLE_SELECTOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_SELECTOR() { return GetToken(RussianBIGrammarParser.COLUMN_SELECTOR, 0); }
		public ColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_column; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnContext column() {
		ColumnContext _localctx = new ColumnContext(Context, State);
		EnterRule(_localctx, 4, RULE_column);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(TABLE_SELECTOR);
			State = 29;
			Match(COLUMN_SELECTOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByColumnsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext[] column() {
			return GetRuleContexts<ColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column(int i) {
			return GetRuleContext<ColumnContext>(i);
		}
		public GroupByColumnsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByColumns; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterGroupByColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitGroupByColumns(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByColumns(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByColumnsContext groupByColumns() {
		GroupByColumnsContext _localctx = new GroupByColumnsContext(Context, State);
		EnterRule(_localctx, 6, RULE_groupByColumns);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			column();
			State = 36;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 32;
					Match(T__2);
					State = 33;
					column();
					}
					} 
				}
				State = 38;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByCalculationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCalculationContext[] groupByCalculation() {
			return GetRuleContexts<GroupByCalculationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByCalculationContext groupByCalculation(int i) {
			return GetRuleContext<GroupByCalculationContext>(i);
		}
		public GroupByCalculationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByCalculations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterGroupByCalculations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitGroupByCalculations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByCalculations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByCalculationsContext groupByCalculations() {
		GroupByCalculationsContext _localctx = new GroupByCalculationsContext(Context, State);
		EnterRule(_localctx, 8, RULE_groupByCalculations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			groupByCalculation();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 40;
				Match(T__2);
				State = 41;
				groupByCalculation();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByCalculationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MeasureNameContext measureName() {
			return GetRuleContext<MeasureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SumFuncContext sumFunc() {
			return GetRuleContext<SumFuncContext>(0);
		}
		public GroupByCalculationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByCalculation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterGroupByCalculation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitGroupByCalculation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroupByCalculation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GroupByCalculationContext groupByCalculation() {
		GroupByCalculationContext _localctx = new GroupByCalculationContext(Context, State);
		EnterRule(_localctx, 10, RULE_groupByCalculation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			measureName();
			State = 48;
			Match(T__2);
			State = 49;
			sumFunc();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumFuncContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LR_BRACKET() { return GetToken(RussianBIGrammarParser.LR_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnContext column() {
			return GetRuleContext<ColumnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RR_BRACKET() { return GetToken(RussianBIGrammarParser.RR_BRACKET, 0); }
		public SumFuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumFunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterSumFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitSumFunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSumFunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SumFuncContext sumFunc() {
		SumFuncContext _localctx = new SumFuncContext(Context, State);
		EnterRule(_localctx, 12, RULE_sumFunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			Match(T__3);
			State = 52;
			Match(LR_BRACKET);
			State = 53;
			column();
			State = 54;
			Match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NON_EMPTY_STRING() { return GetToken(RussianBIGrammarParser.NON_EMPTY_STRING, 0); }
		public MeasureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.EnterMeasureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRussianBIGrammarListener typedListener = listener as IRussianBIGrammarListener;
			if (typedListener != null) typedListener.ExitMeasureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRussianBIGrammarVisitor<TResult> typedVisitor = visitor as IRussianBIGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasureName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasureNameContext measureName() {
		MeasureNameContext _localctx = new MeasureNameContext(Context, State);
		EnterRule(_localctx, 14, RULE_measureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(NON_EMPTY_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,10,59,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,3,1,25,8,1,1,1,1,1,1,2,1,2,1,2,1,3,
		1,3,1,3,5,3,35,8,3,10,3,12,3,38,9,3,1,4,1,4,1,4,5,4,43,8,4,10,4,12,4,46,
		9,4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,0,0,8,0,2,4,6,8,10,
		12,14,0,0,53,0,16,1,0,0,0,2,19,1,0,0,0,4,28,1,0,0,0,6,31,1,0,0,0,8,39,
		1,0,0,0,10,47,1,0,0,0,12,51,1,0,0,0,14,56,1,0,0,0,16,17,5,1,0,0,17,18,
		3,2,1,0,18,1,1,0,0,0,19,20,5,2,0,0,20,21,5,7,0,0,21,24,3,6,3,0,22,23,5,
		3,0,0,23,25,3,8,4,0,24,22,1,0,0,0,24,25,1,0,0,0,25,26,1,0,0,0,26,27,5,
		8,0,0,27,3,1,0,0,0,28,29,5,5,0,0,29,30,5,6,0,0,30,5,1,0,0,0,31,36,3,4,
		2,0,32,33,5,3,0,0,33,35,3,4,2,0,34,32,1,0,0,0,35,38,1,0,0,0,36,34,1,0,
		0,0,36,37,1,0,0,0,37,7,1,0,0,0,38,36,1,0,0,0,39,44,3,10,5,0,40,41,5,3,
		0,0,41,43,3,10,5,0,42,40,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,44,45,1,0,
		0,0,45,9,1,0,0,0,46,44,1,0,0,0,47,48,3,14,7,0,48,49,5,3,0,0,49,50,3,12,
		6,0,50,11,1,0,0,0,51,52,5,4,0,0,52,53,5,7,0,0,53,54,3,4,2,0,54,55,5,8,
		0,0,55,13,1,0,0,0,56,57,5,10,0,0,57,15,1,0,0,0,3,24,36,44
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
