//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from RussianBIGrammar.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class RussianBIGrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, TABLE_SELECTOR=5, COLUMN_SELECTOR=6, LR_BRACKET=7, 
		RR_BRACKET=8, WS=9, NON_EMPTY_STRING=10;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "TABLE_SELECTOR", "COLUMN_SELECTOR", "LR_BRACKET", 
		"RR_BRACKET", "WS", "NON_EMPTY_STRING", "STRING_LETTER"
	};


	public RussianBIGrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RussianBIGrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'calc'", "'groupBy'", "','", "'SUM'", null, null, "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "TABLE_SELECTOR", "COLUMN_SELECTOR", "LR_BRACKET", 
		"RR_BRACKET", "WS", "NON_EMPTY_STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RussianBIGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RussianBIGrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,10,86,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,4,4,47,8,4,11,
		4,12,4,48,1,4,1,4,1,5,1,5,1,5,1,5,4,5,57,8,5,11,5,12,5,58,1,5,1,5,1,6,
		1,6,1,7,1,7,1,8,4,8,68,8,8,11,8,12,8,69,1,8,1,8,1,9,1,9,4,9,76,8,9,11,
		9,12,9,77,1,9,1,9,1,10,1,10,1,10,3,10,85,8,10,0,0,11,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,0,1,0,4,1,0,39,39,1,0,93,93,3,0,9,10,13,
		13,32,32,1,0,34,34,91,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,1,23,1,0,0,0,3,28,1,0,0,0,5,36,1,0,0,0,7,38,1,0,0,0,9,42,1,0,0,0,
		11,52,1,0,0,0,13,62,1,0,0,0,15,64,1,0,0,0,17,67,1,0,0,0,19,73,1,0,0,0,
		21,84,1,0,0,0,23,24,5,99,0,0,24,25,5,97,0,0,25,26,5,108,0,0,26,27,5,99,
		0,0,27,2,1,0,0,0,28,29,5,103,0,0,29,30,5,114,0,0,30,31,5,111,0,0,31,32,
		5,117,0,0,32,33,5,112,0,0,33,34,5,66,0,0,34,35,5,121,0,0,35,4,1,0,0,0,
		36,37,5,44,0,0,37,6,1,0,0,0,38,39,5,83,0,0,39,40,5,85,0,0,40,41,5,77,0,
		0,41,8,1,0,0,0,42,46,5,39,0,0,43,47,8,0,0,0,44,45,5,39,0,0,45,47,5,39,
		0,0,46,43,1,0,0,0,46,44,1,0,0,0,47,48,1,0,0,0,48,46,1,0,0,0,48,49,1,0,
		0,0,49,50,1,0,0,0,50,51,5,39,0,0,51,10,1,0,0,0,52,56,5,91,0,0,53,57,8,
		1,0,0,54,55,5,93,0,0,55,57,5,93,0,0,56,53,1,0,0,0,56,54,1,0,0,0,57,58,
		1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,60,1,0,0,0,60,61,5,93,0,0,61,12,
		1,0,0,0,62,63,5,40,0,0,63,14,1,0,0,0,64,65,5,41,0,0,65,16,1,0,0,0,66,68,
		7,2,0,0,67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,71,
		1,0,0,0,71,72,6,8,0,0,72,18,1,0,0,0,73,75,5,34,0,0,74,76,3,21,10,0,75,
		74,1,0,0,0,76,77,1,0,0,0,77,75,1,0,0,0,77,78,1,0,0,0,78,79,1,0,0,0,79,
		80,5,34,0,0,80,20,1,0,0,0,81,85,8,3,0,0,82,83,5,34,0,0,83,85,5,34,0,0,
		84,81,1,0,0,0,84,82,1,0,0,0,85,22,1,0,0,0,8,0,46,48,56,58,69,77,84,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
